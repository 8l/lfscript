#!/bin/bash

# The instructions in this file are extracted from
# 'Linux From Scratch 7.6' (SVN-20140821 / r10727).
#
# Linux From Scratch is released under the MIT license.
# Copyright (C) 1999-2014, Gerard Beekmans

RESUMEBACKUP="4"
BUILDBEYOND="9"
LASTFUNCTION="10"
BUILDUSER="lfs"
ROOTVARIABLE="LFS"
EXTERNAL_FOLDERS="/tools"
CONTAINS="acl attr autoconf automake bash bc binutils bison bootscripts bzip2
          check coreutils dejagnu diffutils e2fsprogs eudev expat expect file
          findutils flex gawk gcc gdbm gettext glibc gmp gperf grep groff grub
          gzip iana-etc inetutils intltool iproute2 kbd kernel kmod less libcap
          libpipeline libstdc++ libtool linux-headers m4 make man-db man-pages
          mpc mpfr ncurses patch perl pkgconfig procps psmisc readline sed
          shadow sysklogd sysvinit tar tcl texinfo util-linux vim xml-parser xz
          zlib"

# Note: This script is devided in several functions. Each function represents
#       the scope of a shell. Whenever the shell environment changes (because
#       of a 'su', 'source' or 'exec' command for example), LFScript will
#       automatically transfer control to the next function.

##############################
buildbase1() { # SHELL SCOPE #
##############################

# --------------------------------- #
# Creating the $LFS/tools Directory #
# --------------------------------- #

mkdir -v $LFS/tools

ln -sv $LFS/tools /

# ------------------- #
# Adding the LFS User #
# ------------------- #

groupadd lfs
useradd -s /bin/bash -g lfs -m -k /dev/null lfs

passwd lfs

chown -v lfs $LFS/tools

chown -v lfs $LFS/sources

su - lfs

#################################
}; buildbase2() { # SHELL SCOPE #
#################################

# -------------------------- #
# Setting Up the Environment #
# -------------------------- #

cat > ~/.bash_profile << "EOF"
exec env -i HOME=$HOME TERM=$TERM PS1='\u:\w\$ ' /bin/bash
EOF

cat > ~/.bashrc << "EOF"
set +h
umask 022
LFS=/mnt/lfs
LC_ALL=POSIX
LFS_TGT=$(uname -m)-lfs-linux-gnu
PATH=/tools/bin:/bin:/usr/bin
export LFS LC_ALL LFS_TGT PATH
EOF

source ~/.bash_profile

#################################
}; buildbase3() { # SHELL SCOPE #
#################################

# (Compiling packages) #

BUILD binutils
BUILD gcc
BUILD linux-headers
BUILD glibc
BUILD libstdc++
BUILD binutils
BUILD gcc
BUILD tcl
BUILD expect
BUILD dejagnu
BUILD check
BUILD ncurses
BUILD bash
BUILD bzip2
BUILD coreutils
BUILD diffutils
BUILD file
BUILD findutils
BUILD gawk
BUILD gettext
BUILD grep
BUILD gzip
BUILD m4
BUILD make
BUILD patch
BUILD perl
BUILD sed
BUILD tar
BUILD texinfo
BUILD util-linux
BUILD xz

# --------- #
# Stripping #
# --------- #

strip --strip-debug /tools/lib/*
# (*) '/usr/bin/strip' might not work, so compromise and use 'strip' from the toolchain
#/usr/sbin/strip --strip-unneeded /tools/{,s}bin/*
strip --strip-unneeded /tools/{,s}bin/*

rm -rf /tools/{,share}/{info,man,doc}

#################################
}; buildbase4() { # SHELL SCOPE #
#################################

# ------------------ #
# Changing Ownership #
# ------------------ #

chown -R root:root $LFS/tools

# ------------------------------------- #
# Preparing Virtual Kernel File Systems #
# ------------------------------------- #

mkdir -pv $LFS/{dev,proc,sys,run}

mknod -m 600 $LFS/dev/console c 5 1
mknod -m 666 $LFS/dev/null c 1 3

mount -v --bind /dev $LFS/dev

mount -vt devpts devpts $LFS/dev/pts -o gid=5,mode=620
mount -vt proc proc $LFS/proc
mount -vt sysfs sysfs $LFS/sys
mount -vt tmpfs tmpfs $LFS/run

if [ -h $LFS/dev/shm ]; then
  mkdir -pv $LFS/$(readlink $LFS/dev/shm)
fi

# ------------------------------- #
# Entering the Chroot Environment #
# ------------------------------- #

chroot "$LFS" /tools/bin/env -i \
    HOME=/root                  \
    TERM="$TERM"                \
    PS1='\u:\w\$ '              \
    PATH=/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin \
    /tools/bin/bash --login +h

#################################
}; buildbase5() { # SHELL SCOPE #
#################################

# -------------------- #
# Creating Directories #
# -------------------- #

mkdir -pv /{bin,boot,etc/{opt,sysconfig},home,lib,mnt,opt}
mkdir -pv /{media/{floppy,cdrom},sbin,srv,var}
install -dv -m 0750 /root
install -dv -m 1777 /tmp /var/tmp
mkdir -pv /usr/{,local/}{bin,include,lib,sbin,src}
mkdir -pv /usr/{,local/}share/{color,dict,doc,info,locale,man}
mkdir -v  /usr/{,local/}share/{misc,terminfo,zoneinfo}
mkdir -v  /usr/libexec
mkdir -pv /usr/{,local/}share/man/man{1..8}

case $(uname -m) in
 x86_64) ln -sv lib /lib64
         ln -sv lib /usr/lib64
         ln -sv lib /usr/local/lib64 ;;
esac

mkdir -v /var/{log,mail,spool}
ln -sv /run /var/run
ln -sv /run/lock /var/lock
mkdir -pv /var/{opt,cache,lib/{color,misc,locate},local}

# ------------------------------------- #
# Creating Essential Files and Symlinks #
# ------------------------------------- #

ln -sv /tools/bin/{bash,cat,echo,pwd,stty} /bin
ln -sv /tools/bin/perl /usr/bin
ln -sv /tools/lib/libgcc_s.so{,.1} /usr/lib
ln -sv /tools/lib/libstdc++.so{,.6} /usr/lib
sed 's/tools/usr/' /tools/lib/libstdc++.la > /usr/lib/libstdc++.la
ln -sv bash /bin/sh

ln -sv /proc/self/mounts /etc/mtab

cat > /etc/passwd << "EOF"
root:x:0:0:root:/root:/bin/bash
bin:x:1:1:bin:/dev/null:/bin/false
daemon:x:6:6:Daemon User:/dev/null:/bin/false
messagebus:x:18:18:D-Bus Message Daemon User:/var/run/dbus:/bin/false
nobody:x:99:99:Unprivileged User:/dev/null:/bin/false
EOF

cat > /etc/group << "EOF"
root:x:0:
bin:x:1:daemon
sys:x:2:
kmem:x:3:
tape:x:4:
tty:x:5:
daemon:x:6:
floppy:x:7:
disk:x:8:
lp:x:9:
dialout:x:10:
audio:x:11:
video:x:12:
utmp:x:13:
usb:x:14:
cdrom:x:15:
adm:x:16:
messagebus:x:18:
systemd-journal:x:23:
input:x:24:
mail:x:34:
nogroup:x:99:
users:x:999:
EOF

exec /tools/bin/bash --login +h

#################################
}; buildbase6() { # SHELL SCOPE #
#################################

touch /var/log/{btmp,lastlog,wtmp}
chgrp -v utmp /var/log/lastlog
chmod -v 664  /var/log/lastlog
chmod -v 600  /var/log/btmp

# (Compiling packages) #

BUILD linux-headers
BUILD man-pages
BUILD glibc

# ----------------------- #
# Adjusting the Toolchain #
# ----------------------- #

mv -v /tools/bin/{ld,ld-old}
mv -v /tools/$(gcc -dumpmachine)/bin/{ld,ld-old}
mv -v /tools/bin/{ld-new,ld}
ln -sv /tools/bin/ld /tools/$(gcc -dumpmachine)/bin/ld

gcc -dumpspecs | sed -e 's@/tools@@g'                   \
    -e '/\*startfile_prefix_spec:/{n;s@.*@/usr/lib/ @}' \
    -e '/\*cpp:/{n;s@$@ -isystem /usr/include@}' >      \
    `dirname $(gcc --print-libgcc-file-name)`/specs

echo 'main(){}' > dummy.c
cc dummy.c -v -Wl,--verbose &> dummy.log
readelf -l a.out | grep ': /lib'

grep -o '/usr/lib.*/crt[1in].*succeeded' dummy.log

grep -B1 '^ /usr/include' dummy.log

grep 'SEARCH.*/usr/lib' dummy.log |sed 's|; |\n|g'

grep "/lib.*/libc.so.6 " dummy.log

grep found dummy.log

rm -v dummy.c a.out dummy.log

# (Compiling packages) #

BUILD zlib
BUILD file
BUILD binutils
BUILD gmp
BUILD mpfr
BUILD mpc
BUILD gcc
BUILD bzip2
BUILD pkgconfig
BUILD ncurses
BUILD attr
BUILD acl
BUILD libcap
BUILD sed
BUILD shadow
BUILD psmisc
BUILD procps
BUILD e2fsprogs
BUILD coreutils
BUILD iana-etc
BUILD m4
BUILD flex
BUILD bison
BUILD grep
BUILD readline
BUILD bash

# (Refresh bash)

exec /bin/bash --login +h

#################################
}; buildbase7() { # SHELL SCOPE #
#################################

# (Compiling packages) #

BUILD bc
BUILD libtool
BUILD gdbm
BUILD expat
BUILD inetutils
BUILD perl
BUILD xml-parser
BUILD autoconf
BUILD automake
BUILD diffutils
BUILD gawk
BUILD findutils
BUILD gettext
BUILD intltool
BUILD gperf
BUILD groff
BUILD xz
BUILD grub
BUILD less
BUILD gzip
BUILD iproute2
BUILD kbd
BUILD kmod
BUILD libpipeline
BUILD make
BUILD patch
BUILD sysklogd
BUILD sysvinit
BUILD tar
BUILD texinfo
BUILD eudev
BUILD util-linux
BUILD man-db
BUILD vim

#################################
}; buildbase8() { # SHELL SCOPE #
#################################

# ----------- #
# Cleaning Up #
# ----------- #

rm -rf ${LFS}/tmp/*

chroot "$LFS" /usr/bin/env -i              \
    HOME=/root TERM="$TERM" PS1='\u:\w\$ ' \
    PATH=/bin:/usr/bin:/sbin:/usr/sbin     \
    /bin/bash --login

#################################
}; buildbase9() { # SHELL SCOPE #
#################################

rm -rf /tools

# (Compiling packages) #

BUILD bootscripts
BUILD kernel

# ------- #
# The End #
# ------- #

echo SVN-20140821 > /etc/lfs-release

cat > /etc/lsb-release << "EOF"
DISTRIB_ID="Linux From Scratch"
DISTRIB_RELEASE="SVN-20140821"
DISTRIB_CODENAME="<your name here>"
DISTRIB_DESCRIPTION="Linux From Scratch"
EOF

##################################
}; buildbase10() { # SHELL SCOPE #
##################################

# -------------------- #
# Rebooting the System #
# -------------------- #

umount -v $LFS/dev/pts
umount -v $LFS/dev
umount -v $LFS/run
umount -v $LFS/proc
umount -v $LFS/sys

#################
} # END OF FILE #
#################

